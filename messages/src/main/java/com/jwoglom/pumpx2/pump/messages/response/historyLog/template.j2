package com.jwoglom.pumpx2.pump.messages.response.{{cat}};

import org.apache.commons.lang3.Validate;
import com.jwoglom.pumpx2.pump.messages.annotations.HistoryLogProps;
import com.jwoglom.pumpx2.pump.messages.helpers.Bytes;

import java.math.BigInteger;

@HistoryLogProps(
    opCode = {{responseOpcode}},
    displayName = "{{ historyLogDisplayName }}"{% if historyLogUsedByAndroid %},
    usedByAndroid = true{% endif %}{% if historyLogReferencedInAndroid %},
    referencedInAndroid = true{% endif %}{% if historyLogUsedByTidepool %},
    usedByTidepool = true{% endif %}
)
public class {{responseName}} extends HistoryLog {
    {% for arg in responseArgs %}
    private {{ arg.type }} {{ arg.name }};{% endfor %}
    {% if responseSize > 0 %}
    public {{responseName}}() {}{% endif %}
    public {{responseName}}(long pumpTimeSec, long sequenceNum{% if responseSize > 0 %}, {% endif %}{% for arg in responseArgs %}{{ arg.type }} {{ arg.name }}{{ ", " if not loop.last else "" }}{% endfor %}) {
        super(pumpTimeSec, sequenceNum);
        {% if responseSize == 0 %}this.cargo = buildCargo(pumpTimeSec, sequenceNum);
        {% else %}this.cargo = buildCargo(pumpTimeSec, sequenceNum, {% for arg in responseArgs %}{{ arg.name }}{{ ", " if not loop.last else "" }}{% endfor %});
        {% for arg in responseArgs %}this.{{ arg.name }} = {% if arg.type == 'BigInteger' %}BigInteger.valueOf({{ arg.name }}){% else %}{{ arg.name }}{% endif %};
        {% endfor %}{% endif %}
    }

    public {{responseName}}({% for arg in responseArgs %}{{ arg.type }} {{ arg.name }}{{ ", " if not loop.last else "" }}{% endfor %}) {
        this(0, 0{% if responseSize > 0 %}, {% endif %}{% for arg in responseArgs %}{{ arg.name }}{{ ", " if not loop.last else "" }}{% endfor %});
    }

    public int typeId() {
        return {{responseOpcode}};
    }

    public void parse(byte[] raw) {
        Validate.isTrue(raw.length == 26);
        this.cargo = raw;
        parseBase(raw);
        {% for arg in responseArgs %}this.{{ arg.name }} = {% if arg.size == 1 %}raw[{{ arg.index }}]{% if arg.type == "boolean" %} != 0{% endif %};
        {% elif arg.type == "String" %}Bytes.readString(raw, {{ arg.index }}, {{ arg.size }});
        {% elif arg.size == 2 %}Bytes.readShort(raw, {{ arg.index }});
        {% elif arg.size == 4 %}{% if arg.type == "float" %}Bytes.readFloat(raw, {{ arg.index }});{% else %}Bytes.readUint32(raw, {{ arg.index }});{% endif %}
        {% elif arg.size == 8 %}Bytes.readUint64(raw, {{ arg.index }});
        {% else %}null; // {{ arg.size }} at {{ arg.index }}
        {% endif %}{% endfor %}
    }

    public static byte[] buildCargo(long pumpTimeSec, long sequenceNum{% if responseSize > 0 %}, {% endif %}{% for arg in responseArgs %}{{ arg.type }} {{ arg.name }}{{ ", " if not loop.last else "" }}{% endfor %}) {
        return HistoryLog.fillCargo(Bytes.combine(
            new byte[]{{'{'}}(byte) {{responseOpcode}}, 0},
            Bytes.toUint32(pumpTimeSec),
            Bytes.toUint32(sequenceNum){% if responseSize > 0 %},{% endif %}{% for arg in responseArgs %}{% if arg.size == 1 %}
            new byte[]{ (byte) {% if arg.type == "boolean" %}({{ arg.name }} ? 1 : 0){% else %}{{ arg.name }}{% endif %} }{% elif arg.type == "String" %}
            Bytes.writeString({{ arg.name }}, {{ arg.size }}){% elif arg.size == 2 %}
            Bytes.firstTwoBytesLittleEndian({{ arg.name }}){% elif arg.size == 4 %}
            {% if arg.type == "float" %}Bytes.toFloat({{ arg.name }}){% else %}Bytes.toUint32({{ arg.name }}){% endif %}{% elif arg.size == 8 %}
            Bytes.toUint64({{ arg.name }}.longValue()){% else %}
            null // {{ arg.size }} at {{ arg.index }}
            {% endif %}{{ ", " if not loop.last else "" }}{% endfor %}));
    }
    {% for arg in responseArgs %}public {{ arg.type }} get{{ arg.name[0]|upper }}{{ arg.name[1:] }}() {
        return {{ arg.name }};
    }
    {% endfor %}
}
