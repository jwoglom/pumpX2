package com.jwoglom.pumpx2.pump.messages.response.{{cat}};

import org.apache.commons.lang3.Validate;
import com.jwoglom.pumpx2.pump.messages.bluetooth.Characteristic;
import com.jwoglom.pumpx2.pump.messages.helpers.Bytes;
import com.jwoglom.pumpx2.pump.messages.Message;
import com.jwoglom.pumpx2.pump.messages.MessageType;
import com.jwoglom.pumpx2.pump.messages.annotations.MessageProps;
{% if mobiOnly %}import com.jwoglom.pumpx2.pump.messages.models.KnownApiVersion;
import com.jwoglom.pumpx2.pump.messages.models.SupportedDevices;
{% endif %}import com.jwoglom.pumpx2.pump.messages.request.{{cat}}.{{requestName}};

import java.math.BigInteger;

@MessageProps(
    opCode={{responseOpcode}},
    size={{responseSize}},
    type=MessageType.RESPONSE,
    characteristic=Characteristic.{{catUuid}},{% if catUuid == "CONTROL" %}
    signed=true,{% endif %}
    {% if mobiOnly %}minApi=KnownApiVersion.MOBI_API_V3_5,
    supportedDevices=SupportedDevices.MOBI_ONLY,
    {% endif %}request={{requestName}}.class
)
public class {{responseName}} extends Message {
    {% for arg in responseArgs %}{% if arg.name != "raw" %}
    private {{ arg.type }} {{ arg.name }};{% endif %}{% endfor %}
    {% if responseSize > 0 %}
    public {{responseName}}() {}
    {% endif %}
    public {{responseName}}({% for arg in responseArgs %}{{ arg.type }} {{ arg.name }}{{ ", " if not loop.last else "" }}{% endfor %}) {
        {% if responseSize == 0 %}this.cargo = EMPTY;
        {% else %}this.cargo = buildCargo({% for arg in responseArgs %}{{ arg.name }}{{ ", " if not loop.last else "" }}{% endfor %});
        {% for arg in responseArgs %}{% if arg.name != "raw" %}this.{{ arg.name }} = {% if arg.type == 'BigInteger' %}BigInteger.valueOf({{ arg.name }}){% else %}{{ arg.name }}{% endif %};
        {% endif %}{% endfor %}{% endif %}
    }

    public void parse(byte[] raw) { {% if catUuid == "CONTROL" %}
        raw = this.removeSignedRequestHmacBytes(raw);{% endif %}
        Validate.isTrue(raw.length == props().size());
        this.cargo = raw;
        {% for arg in responseArgs %}{% if arg.name != "raw" %}this.{{ arg.name }} = {% if arg.size == 1 %}raw{% if arg.type == "byte[]" %}{% else %}[{{ arg.index }}]{% endif %}{% if arg.type == "boolean" %} != 0{% endif %};
        {% elif arg.type == "String" %}Bytes.readString(raw, {{ arg.index }}, {{ arg.size }});
        {% elif arg.size == 2 %}Bytes.readShort(raw, {{ arg.index }});
        {% elif arg.size == 4 %}{% if arg.type == "float" %}Bytes.readFloat(raw, {{ arg.index }});{% else %}Bytes.readUint32(raw, {{ arg.index }});{% endif %}
        {% elif arg.size == 8 %}Bytes.readUint64(raw, {{ arg.index }});
        {% else %}null; // {{ arg.size }} at {{ arg.index }}
        {% endif %}{% endif %}{% endfor %}
    }

    {% if responseSize > 0 %}
    public static byte[] buildCargo({% for arg in responseArgs %}{{ arg.type }} {{ arg.name }}{{ ", " if not loop.last else "" }}{% endfor %}) {
        return Bytes.combine({% for arg in responseArgs %}{% if arg.size == 1 %}
            new byte[]{ (byte) {% if arg.type == "boolean" %}({{ arg.name }} ? 1 : 0){% else %}{{ arg.name }}{% endif %} }{% elif arg.type == "String" %}
            Bytes.writeString({{ arg.name }}, {{ arg.size }}){% elif arg.size == 2 %}
            Bytes.firstTwoBytesLittleEndian({{ arg.name }}){% elif arg.size == 4 %}
            {% if arg.type == "float" %}Bytes.toFloat({{ arg.name }}){% else %}Bytes.toUint32({{ arg.name }}){% endif %}{% elif arg.size == 8 %}
            Bytes.toUint64({{ arg.name }}.longValue()){% elif arg.type == "byte[]" %}
            {{ arg.name }}{% else %}
            null // {{ arg.size }} at {{ arg.index }}
            {% endif %}{{ ", " if not loop.last else "" }}{% endfor %});
    }
    {% endif %}
    {% for arg in responseArgs %}{% if arg.name != "raw" %}public {{ arg.type }} get{{ arg.name[0]|upper }}{{ arg.name[1:] }}() {
        return {{ arg.name }};
    }
    {% endif %}{% endfor %}
}
